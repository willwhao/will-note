(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{505:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"git分支-分支原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git分支-分支原理"}},[s._v("#")]),s._v(" Git分支-分支原理")]),s._v(" "),t("p",[s._v("Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。")]),s._v(" "),t("h3",{attrs:{id:"首次提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首次提交"}},[s._v("#")]),s._v(" 首次提交")]),s._v(" "),t("p",[s._v("在进行提交操作时，Git 会保存一个提交对象（commit object）。")]),s._v(" "),t("p",[s._v("假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 "),t("em",[s._v("blob")]),s._v(" 对象来保存它们），最终将校验和加入到暂存区域等待提交：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" README test.rb LICENSE\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'The initial commit of my project'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("当使用 "),t("code",[s._v("git commit")]),s._v(" 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，Git 就可以在需要的时候重现此次保存的快照。")]),s._v(" "),t("p",[s._v("现在，Git 仓库中有五个对象：三个 "),t("strong",[t("em",[s._v("blob")]),s._v(" 对象")]),s._v("（保存着文件快照）、一个 "),t("strong",[s._v("树对象")]),s._v(" （记录着目录结构和 blob 对象索引）以及一个 "),t("strong",[s._v("提交对象")]),s._v("（包含着指向前述树对象的指针和所有提交信息）。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906145443.jpg",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图1. 首次提交对象及其树结构 ▲")]),s._v(" "),t("h4",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结：")]),s._v(" "),t("ol",[t("li",[t("p",[t("code",[s._v("git add")]),s._v(" 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的"),t("strong",[s._v("文件快照（blob对象")]),s._v("）。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("git commit")]),s._v(" 提交操作，计算子目录或跟目录的校验和 保存为"),t("strong",[s._v("树对象")]),s._v("。随后，创建一个"),t("strong",[s._v("提交对象")]),s._v("，包含着指向树对象的指针和所有提交信息。")])])]),s._v(" "),t("h3",{attrs:{id:"再次提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#再次提交"}},[s._v("#")]),s._v(" 再次提交")]),s._v(" "),t("p",[s._v("做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906152315.jpg",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图2. 提交对象及其父对象 ▲")]),s._v(" "),t("h3",{attrs:{id:"git-的分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-的分支"}},[s._v("#")]),s._v(" Git 的分支")]),s._v(" "),t("p",[t("strong",[s._v("Git 的分支，其实本质上仅仅是指向提交对象的可变指针")]),s._v("。 Git 的默认分支名字是 "),t("code",[s._v("master")]),s._v("。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 "),t("code",[s._v("master")]),s._v(" 分支。 "),t("strong",[t("code",[s._v("master")]),s._v(" 分支指针会在每次提交时自动向前移动")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("Git 的 "),t("code",[s._v("master")]),s._v(" 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906154109.jpg",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图3. 分支及其提交历史 ▲")]),s._v(" "),t("h3",{attrs:{id:"创建分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[s._v("#")]),s._v(" 创建分支")]),s._v(" "),t("p",[s._v("Git 是怎么创建新分支的呢？ 很简单，它"),t("strong",[s._v("只是为你创建了一个可以移动的新的指针")]),s._v("。 比如，创建一个 testing 分支， 你需要使用 "),t("code",[s._v("git branch")]),s._v(" 命令：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch testing\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这会在当前所在的提交对象上创建一个指针。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906154330.png",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图4. 两个指向相同提交历史的分支 ▲")]),s._v(" "),t("h3",{attrs:{id:"当前分支的指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当前分支的指针"}},[s._v("#")]),s._v(" 当前分支的指针")]),s._v(" "),t("p",[s._v("Git 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个"),t("strong",[s._v("名为 "),t("code",[s._v("HEAD")]),s._v(" 的特殊指针")]),s._v("，"),t("strong",[s._v("指向当前所在的本地分支")]),s._v("（译注："),t("strong",[s._v("将 "),t("code",[s._v("HEAD")]),s._v(" 想象为当前分支的别名")]),s._v("）。 在本例中，你仍然在 "),t("code",[s._v("master")]),s._v(" 分支上。 因为 "),t("code",[s._v("git branch")]),s._v(" 命令仅仅 "),t("strong",[s._v("创建")]),s._v(" 一个新分支，并不会自动切换到新分支中去。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906205325.png",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图5. HEAD 指向当前所在的分支 ▲")]),s._v(" "),t("h3",{attrs:{id:"查看当前所在分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看当前所在分支"}},[s._v("#")]),s._v(" 查看当前所在分支")]),s._v(" "),t("p",[s._v("你可以简单地使用 "),t("code",[s._v("git log")]),s._v(" 命令查看各个分支当前所指的对象。 提供这一功能的参数是 "),t("code",[s._v("--decorate")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --oneline --decorate\nf30ab "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HEAD -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" master, testing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" feature "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# f30ab提交对象 (HEAD当前所在分支 -> master分支，testing 分支)")]),s._v("\n34ac2 Fixed bug "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 34ac2 提交对象")]),s._v("\n98ca9 The initial commit of my project "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 98ca9 提交对象")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("正如你所见，当前 "),t("code",[s._v("master")]),s._v(" 和 "),t("code",[s._v("testing")]),s._v(" 分支均指向校验和以 "),t("code",[s._v("f30ab")]),s._v(" 开头的提交对象。")]),s._v(" "),t("h3",{attrs:{id:"分支切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支切换"}},[s._v("#")]),s._v(" 分支切换")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout testing  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git checkout <分支名>")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这样 "),t("code",[s._v("HEAD")]),s._v(" 就指向 "),t("code",[s._v("testing")]),s._v(" 分支了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906205917.png",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图6. HEAD 指向当前所在的分支 ▲")]),s._v(" "),t("p",[s._v("那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" test.rb\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -a -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'made a change'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906210338.png",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图7. HEAD 分支随着提交操作自动向前移动 ▲")]),s._v(" "),t("p",[s._v("如图所示，你的 "),t("code",[s._v("testing")]),s._v(" 分支向前移动了，但是 "),t("code",[s._v("master")]),s._v(" 分支却没有，它仍然指向运行 "),t("code",[s._v("git checkout")]),s._v(" 时所指的对象。 这就有意思了，现在我们切换回 "),t("code",[s._v("master")]),s._v(" 分支看看：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout master\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906210810.png",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图8. 检出时 HEAD 随之移动 ▲")]),s._v(" "),t("p",[s._v("这条命令"),t("strong",[s._v("做了两件事")]),s._v("。 "),t("strong",[s._v("一是使 HEAD 指回 "),t("code",[s._v("master")]),s._v(" 分支，二是将工作目录恢复成 "),t("code",[s._v("master")]),s._v(" 分支所指向的快照内容")]),s._v("。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 "),t("code",[s._v("testing")]),s._v(" 分支所做的修改，以便于向另一个方向进行开发。")]),s._v(" "),t("p",[s._v("我们不妨再稍微做些修改并提交：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" test.rb\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -a -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'made other changes'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("现在，这个项目的提交历史已经产生了分叉（参见 "),t("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/divergent_history",target:"_blank",rel:"noopener noreferrer"}},[s._v("项目分叉历史"),t("OutboundLink")],1),s._v("）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 "),t("code",[s._v("branch")]),s._v("、"),t("code",[s._v("checkout")]),s._v(" 和 "),t("code",[s._v("commit")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200906211331.png",alt:""}})]),s._v(" "),t("p",{attrs:{align:"center"}},[s._v("图9. 项目分叉历史 ▲")]),s._v(" "),t("p",[s._v("你可以简单地使用 "),t("code",[s._v("git log")]),s._v(" 命令查看分叉历史。 运行 "),t("code",[s._v("git log --oneline --decorate --graph --all")]),s._v(" ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --oneline --decorate --graph --all\n* c2b9e "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HEAD, master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" made other changes\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" * 87ab2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("testing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" made a change\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("/\n* f30ab "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？")]),s._v(" "),t("p",[s._v("这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。")]),s._v(" "),t("h3",{attrs:{id:"创建分支同时切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建分支同时切换"}},[s._v("#")]),s._v(" 创建分支同时切换")]),s._v(" "),t("p",[s._v("通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("newbranchname"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);